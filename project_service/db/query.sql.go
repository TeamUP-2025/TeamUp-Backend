// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserToken = `-- name: GetUserToken :one
SELECT token
FROM "user"
WHERE uId = $1
`

func (q *Queries) GetUserToken(ctx context.Context, uid pgtype.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getUserToken, uid)
	var token string
	err := row.Scan(&token)
	return token, err
}

const upsertUseAndReturnUidAndName = `-- name: UpsertUseAndReturnUidAndName :one

INSERT INTO "user" (login, name, avatar, location, token)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (login)
DO UPDATE SET token = $5, location = $4, avatar = $3, name = $2
RETURNING uid, name
`

type UpsertUseAndReturnUidAndNameParams struct {
	Login    string
	Name     string
	Avatar   *string
	Location *string
	Token    string
}

type UpsertUseAndReturnUidAndNameRow struct {
	Uid  pgtype.UUID
	Name string
}

// - name: getAllUser :many
// SELECT * FROM user;
func (q *Queries) UpsertUseAndReturnUidAndName(ctx context.Context, arg UpsertUseAndReturnUidAndNameParams) (UpsertUseAndReturnUidAndNameRow, error) {
	row := q.db.QueryRow(ctx, upsertUseAndReturnUidAndName,
		arg.Login,
		arg.Name,
		arg.Avatar,
		arg.Location,
		arg.Token,
	)
	var i UpsertUseAndReturnUidAndNameRow
	err := row.Scan(&i.Uid, &i.Name)
	return i, err
}
