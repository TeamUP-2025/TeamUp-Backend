// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const upsertUseAndReturnUidAndName = `-- name: UpsertUseAndReturnUidAndName :one
INSERT INTO "user" (email, name, avatar, location, token)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (email)
DO UPDATE SET token = $5, location = $4, avatar = $3, name = $2
RETURNING uid, name
`

type UpsertUseAndReturnUidAndNameParams struct {
	Email    string
	Name     string
	Avatar   *string
	Location *string
	Token    string
}

type UpsertUseAndReturnUidAndNameRow struct {
	Uid  pgtype.UUID
	Name string
}

func (q *Queries) UpsertUseAndReturnUidAndName(ctx context.Context, arg UpsertUseAndReturnUidAndNameParams) (UpsertUseAndReturnUidAndNameRow, error) {
	row := q.db.QueryRow(ctx, upsertUseAndReturnUidAndName,
		arg.Email,
		arg.Name,
		arg.Avatar,
		arg.Location,
		arg.Token,
	)
	var i UpsertUseAndReturnUidAndNameRow
	err := row.Scan(&i.Uid, &i.Name)
	return i, err
}

const getAllUser = `-- name: getAllUser :many
SELECT  FROM user
`

type getAllUserRow struct {
}

func (q *Queries) getAllUser(ctx context.Context) ([]getAllUserRow, error) {
	rows, err := q.db.Query(ctx, getAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getAllUserRow
	for rows.Next() {
		var i getAllUserRow
		if err := rows.Scan(); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
