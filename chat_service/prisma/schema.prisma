generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model application {
  appid       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uid         String  @db.Uuid
  projectid   String  @db.Uuid
  coverletter String? @db.VarChar
  project     project @relation(fields: [projectid], references: [projectid], onDelete: NoAction, onUpdate: NoAction)
  user        user    @relation(fields: [uid], references: [uid], onDelete: NoAction, onUpdate: NoAction)
}

model donation {
  donationid String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uid        String    @db.Uuid
  projectid  String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  project    project   @relation(fields: [projectid], references: [projectid], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [uid], references: [uid], onDelete: NoAction, onUpdate: NoAction)
}

model goal {
  projectid   String?  @db.Uuid
  name        String   @db.VarChar
  goalid      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar
  project     project? @relation(fields: [projectid], references: [projectid], onDelete: NoAction, onUpdate: NoAction)
}

model goose_db_version {
  id         Int      @id @default(autoincrement())
  version_id BigInt
  is_applied Boolean
  tstamp     DateTime @default(now()) @db.Timestamp(6)
}

model license {
  licenseid   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique @db.VarChar
  description String    @db.VarChar
  permission  String?   @db.VarChar
  condition   String?   @db.VarChar
  limitation  String    @db.VarChar
  project     project[]
}

model project {
  projectid   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String        @unique @db.VarChar
  description String        @db.VarChar
  repoid      String?       @db.Uuid
  status      String?       @db.VarChar
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  licenseid   String?       @db.Uuid
  ChatMessage ChatMessage[]
  application application[]
  donation    donation[]
  goal        goal[]
  license     license?      @relation(fields: [licenseid], references: [licenseid], onDelete: NoAction, onUpdate: NoAction)
  repo        repo?         @relation(fields: [repoid], references: [repoid], onDelete: NoAction, onUpdate: NoAction)
  projectTag  projectTag[]
  roadmap     roadmap[]
  teammember  teammember[]
}

model projectTag {
  projectid String  @db.Uuid
  tagid     String  @db.Uuid
  project   project @relation(fields: [projectid], references: [projectid], onDelete: NoAction, onUpdate: NoAction)
  tag       tag     @relation(fields: [tagid], references: [tagid], onDelete: NoAction, onUpdate: NoAction)

  @@id([projectid, tagid])
}

model repo {
  repoid       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uid          String?   @db.Uuid
  name         String    @db.VarChar
  url          String    @db.VarChar
  description  String?   @db.VarChar
  star         Int?
  fork         Int?
  last_updated DateTime? @default(now()) @db.Timestamptz(6)
  language     String?   @db.VarChar
  updated_at   DateTime? @db.Timestamptz(6)
  project      project[]
  user         user?     @relation(fields: [uid], references: [uid], onDelete: NoAction, onUpdate: NoAction)

  @@unique([uid, name], map: "unique_user_repo")
}

model roadmap {
  projectid   String  @db.Uuid
  roadmap     String  @db.VarChar
  description String  @db.VarChar
  status      String  @db.VarChar
  project     project @relation(fields: [projectid], references: [projectid], onDelete: NoAction, onUpdate: NoAction)

  @@id([projectid, roadmap])
}

model tag {
  tagid      String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String       @db.VarChar
  projectTag projectTag[]
  userTag    userTag[]
}

model teammember {
  projectid String  @db.Uuid
  uid       String  @db.Uuid
  role      String  @db.VarChar
  project   project @relation(fields: [projectid], references: [projectid], onDelete: NoAction, onUpdate: NoAction)
  user      user    @relation(fields: [uid], references: [uid], onDelete: NoAction, onUpdate: NoAction)

  @@id([projectid, uid])
}

model user {
  uid                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  login               String        @unique @db.VarChar
  name                String        @db.VarChar
  avatar              String?       @db.VarChar
  location            String?       @db.VarChar
  token               String        @db.VarChar
  bio                 String?
  followers           Int?          @default(0)
  following           Int?          @default(0)
  public_repos        Int?          @default(0)
  total_private_repos Int?          @default(0)
  html_url            String?       @db.VarChar
  last_updated        DateTime?     @default(now()) @db.Timestamptz(6)
  ChatMessage         ChatMessage[]
  application         application[]
  donation            donation[]
  repo                repo[]
  teammember          teammember[]
  userTag             userTag[]
}

model userTag {
  uid   String @db.Uuid
  tagid String @db.Uuid
  tag   tag    @relation(fields: [tagid], references: [tagid], onDelete: NoAction, onUpdate: NoAction)
  user  user   @relation(fields: [uid], references: [uid], onDelete: NoAction, onUpdate: NoAction)

  @@id([uid, tagid])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ChatMessage {
  messageId String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String   @db.Uuid
  login     String   @db.VarChar
  content   String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  project   project  @relation(fields: [projectId], references: [projectid], onDelete: Cascade, onUpdate: NoAction, map: "fk_chatmessage_project")
  user      user     @relation(fields: [login], references: [login], onUpdate: NoAction, map: "fk_chatmessage_user_login")

  @@index([projectId, login, createdAt], map: "idx_chatmessage_project_user_created")
}
